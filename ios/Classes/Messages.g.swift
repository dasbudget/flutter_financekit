// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Values that describe the kinds of data in the finance store.
enum DataType: Int {
  /// The value that describes financial data, such as account information.
  case financialData = 0
  /// The value that describes orders records, such as purchases.
  case orders = 1
}

enum AuthorizationStatus: Int {
  /// A person authorized the app to use FinanceKit services.
  case authorized = 0
  /// A person denied the use of FinanceKit services for the app
  case denied = 1
  /// A person has not chosen whether the app can use FinanceKit services.
  case notDetermined = 2
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FinanceKitApi {
  func isDataAvailable(type: DataType) throws -> Bool
  func authorizationStatus(completion: @escaping (Result<AuthorizationStatus, Error>) -> Void)
  func requestAuthorization(completion: @escaping (Result<AuthorizationStatus, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FinanceKitApiSetup {
  /// The codec used by FinanceKitApi.
  /// Sets up an instance of `FinanceKitApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FinanceKitApi?) {
    let isDataAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_financekit.FinanceKitApi.isDataAvailable", binaryMessenger: binaryMessenger)
    if let api = api {
      isDataAvailableChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = DataType(rawValue: args[0] as! Int)!
        do {
          let result = try api.isDataAvailable(type: typeArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDataAvailableChannel.setMessageHandler(nil)
    }
    let authorizationStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_financekit.FinanceKitApi.authorizationStatus", binaryMessenger: binaryMessenger)
    if let api = api {
      authorizationStatusChannel.setMessageHandler { _, reply in
        api.authorizationStatus() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authorizationStatusChannel.setMessageHandler(nil)
    }
    let requestAuthorizationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_financekit.FinanceKitApi.requestAuthorization", binaryMessenger: binaryMessenger)
    if let api = api {
      requestAuthorizationChannel.setMessageHandler { _, reply in
        api.requestAuthorization() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res.rawValue))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestAuthorizationChannel.setMessageHandler(nil)
    }
  }
}
